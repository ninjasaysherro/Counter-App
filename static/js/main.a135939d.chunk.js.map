{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","_ref","totalCounters","console","log","react_default","a","createElement","className","href","Counter","prevProps","prevState","counter","value","this","props","_this","getBadgeClasses","formatCount","onClick","onIncrement","onRemove","id","classes","Component","Counters","_this$props","onAdd","onReset","counters","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onEnter","input","handleAdd","push","setState","handleReset","c","handleIncrement","toConsumableArray","index","indexOf","objectSpread","handleRemove","counterId","filter","Fragment","navbar","length","components_counters","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.a135939d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Stateless Functional Component\n\nconst NavBar = ({ totalCounters }) => {\n  console.log('NavBar - Rendered');\n  return (\n    <nav className=\"navbar navbar-light bg-dark text-white\">\n      <div className=\"container\">\n        NavBar{''}\n        <span className=\"badge badge-pill badge-primary \">{totalCounters}</span>\n        <a className=\"navbar-brand\" href=\"#\"></a>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.counter.value !== this.props.counter.value) {\n      // Ajax call and get new data from the server\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('Counter - Unmounted');\n  }\n\n  render() {\n    console.log('Counter - Rendered');\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm m-2\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onRemove(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Remove\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = 'badge m-2 badge-';\n    classes += this.props.counter.value === 0 ? 'warning' : 'success';\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? '0' : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n  render() {\n    console.log('Counters - Rendered');\n    const { onAdd, onReset, counters, onRemove, onIncrement } = this.props;\n\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-warning btn-sm m-2\">\n          Reset All\n        </button>\n        <button\n          onClick={() => this.props.onAdd(this.props.counters)}\n          className=\"btn btn-primary btn-sm m-2\"\n        >\n          Add Counter\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onRemove={onRemove}\n            onIncrement={onIncrement}\n            onAdd={onAdd}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    counters: [{ id: 1, value: 0 }],\n  };\n\n  constructor() {\n    super();\n    console.log('App - Constructor');\n  }\n\n  componentDidMount() {\n    console.log('App - Mounted');\n  }\n\n  onEnter = (input) => {\n    console.log('input submitted');\n  };\n\n  handleAdd = (id) => {\n    let { counters } = this.state;\n    counters.push({ id: id + 1, value: 0 });\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleRemove = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log('App - Rendered');\n\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onRemove={this.handleRemove}\n            onAdd={this.handleAdd}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}